/*********************************************
* c# template
* 
*********************************************/
/*********************************************
20.07.07 backjoon 14499. 주사위 굴리기 (C#, rolling dice)

문제
크기가 N×M인 지도가 존재한다. 지도의 오른쪽은 동쪽, 위쪽은 북쪽이다. 이 지도의
위에 주사위가 하나 놓여져 있으며, 주사위의 전개도는 아래와 같다. 지도의 좌표는 
(r, c)로 나타내며, r는 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로부터 떨어진 
칸의 개수이다. 

  2
4 1 3
  5
  6
주사위는 지도 위에 윗 면이 1이고, 동쪽을 바라보는 방향이 3인 상태로 놓여져 있
으며, 놓여져 있는 곳의 좌표는 (x, y) 이다. 가장 처음에 주사위에는 모든 면에 0
이 적혀져 있다.

지도의 각 칸에는 정수가 하나씩 쓰여져 있다. 주사위를 굴렸을 때, 이동한 칸에 쓰
여 있는 수가 0이면, 주사위의 바닥면에 쓰여 있는 수가 칸에 복사된다. 0이 아닌 
경우에는 칸에 쓰여 있는 수가 주사위의 바닥면으로 복사되며, 칸에 쓰여 있는 수는
0이 된다.

주사위를 놓은 곳의 좌표와 이동시키는 명령이 주어졌을 때, 주사위가 이동했을 때 
마다 상단에 쓰여 있는 값을 구하는 프로그램을 작성하시오.

주사위는 지도의 바깥으로 이동시킬 수 없다. 만약 바깥으로 이동시키려고 하는 경
우에는 해당 명령을 무시해야 하며, 출력도 하면 안 된다.

입력
첫째 줄에 지도의 세로 크기 N, 가로 크기 M (1 ≤ N, M ≤ 20), 주사위를 놓은 곳의 
좌표 x y(0 ≤ x ≤ N-1, 0 ≤ y ≤ M-1), 그리고 명령의 개수 K (1 ≤ K ≤ 1,000)가 주
어진다.

둘째 줄부터 N개의 줄에 지도에 쓰여 있는 수가 북쪽부터 남쪽으로, 각 줄은 서쪽부
터 동쪽 순서대로 주어진다. 주사위를 놓은 칸에 쓰여 있는 수는 항상 0이다. 지도
의 각 칸에 쓰여 있는 수는 10을 넘지 않는 자연수 또는 0이다.

마지막 줄에는 이동하는 명령이 순서대로 주어진다. 동쪽은 1, 서쪽은 2, 북쪽은 3, 
남쪽은 4로 주어진다.

출력
이동할 때마다 주사위의 윗 면에 쓰여 있는 수를 출력한다. 만약 바깥으로 이동시키
려고 하는 경우에는 해당 명령을 무시해야 하며, 출력도 하면 안 된다.

test input:
4 2 0 0 8
0 2
3 4
5 6
7 8
4 4 4 1 3 3 3 2


*********************************************/

namespace temp_name
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Text;
    using static System.Console;
    using static IOmacro.CsharpInput; 
    using static IOmacro.CppInput;

    public class Run
    {
        private struct Point
        {
            public int y_, x_;
        }
        
        private int h_;
        private int w_;
        private int[,] matMap;
        private static Point pNow = new Point();
        private int numQry;
        private static int[] dice = new int[6];
        
        private static int[] dy = {-100, 0, 0, -1, 1};
        private static int[] dx = {-100, 1, -1, 0, 0};
        
        private void init()
        {
            h_ = cin;
            w_ = cin;
            pNow.y_ = cin;
            pNow.x_ = cin;
            numQry = cin;
            
            matMap = new int[h_, w_];
            for (int iy = 0; iy < h_; iy++) {
                for (int ix = 0; ix < w_; ix++) {
                    matMap[iy, ix] = cin;
                }
            }
        }
        
        private void rollDice(int p)
        {
            var diceClone = (int[]) dice.Clone();
            
            // dice
            //   1 (top)
            //   4 (north)
            // 3 0 5
            //   2 (south)
            
            if (p == 1) {           // E
                dice[0] = diceClone[5];
                dice[1] = diceClone[3];
                // dice[2] = diceClone[2];
                dice[3] = diceClone[0];
                // dice[4] = diceClone[4];
                dice[5] = diceClone[1];
            } 
            else if (p == 2) {      // W
                dice[0] = diceClone[3];
                dice[1] = diceClone[5];
                // dice[2] = diceClone[2];
                dice[3] = diceClone[1];
                // dice[4] = diceClone[4];
                dice[5] = diceClone[0];
            } 
            else if (p == 3) {      // N
                dice[0] = diceClone[4];
                dice[1] = diceClone[2];
                dice[2] = diceClone[0];
                // dice[3] = diceClone[3];
                dice[4] = diceClone[1];
                // dice[5] = diceClone[5];
            } 
            else if (p == 4) {      // S
                dice[0] = diceClone[2];
                dice[1] = diceClone[4];
                dice[2] = diceClone[1];
                // dice[3] = diceClone[3];
                dice[4] = diceClone[0];
                // dice[5] = diceClone[5];
            }
        }
        
        private void proc()
        {
            for (int i = 0; i < numQry; i++) {
                int diceNow = cin;
                
                var ny = pNow.y_ + dy[diceNow];
                var nx = pNow.x_ + dx[diceNow];
                
                // WriteLine($"{diceNow} {ny} {nx}");
                
                if (!(0 <= ny && ny < h_ && 0 <= nx && nx < w_))
                    continue;
                
                rollDice(diceNow);
                if (matMap[ny, nx] == 0) {
                    matMap[ny, nx] = dice[0];
                }
                else {
                    dice[0] = matMap[ny, nx];
                    matMap[ny, nx] = 0;
                }
                pNow.y_ = ny;
                pNow.x_ = nx;
                
                WriteLine(dice[1]);
            }
        }
        
        public void work()
        {
            init();
            proc();
        }
        
    }
}


class program
{
    static void Main()
    {
        var run = new temp_name.Run();
        run.work();
    }
}



namespace IOmacro
{
    //20.06.29 수정
    
    using System; 
    using System.Linq; 
    using System.IO;
    using System.Collections.Generic;
    
    public class CsharpInput 
    {
        public static StreamWriter _writer = new StreamWriter(Console.OpenStandardOutput());
        public const char separator = ' ';
        public static string _string{get{return Console.ReadLine();}}
        public static string[] _stringa{get{return (Console.ReadLine().Split(separator));}}
        public static int _int{get{return int.Parse(Console.ReadLine());}}
        public static int[] _inta{get{return Console.ReadLine().Split(separator).Select(int.Parse).ToArray();}}
        public static long _long{get{return long.Parse(Console.ReadLine());}}
        public static long[] _longa{get{return Console.ReadLine().Split(separator).Select(long.Parse).ToArray();}}    
        public static double _double{get{return double.Parse(Console.ReadLine());}}
        public static double[] _doublea{get{return Console.ReadLine().Split(separator).Select(double.Parse).ToArray();}}    
    }
    
    public class CppInput 
    {
        public static CppInput cin => new CppInput();
        public const char separator = ' ';
        private static readonly Queue<string> _input = new Queue<string>();
        private CppInput(){}
        public static implicit operator string(CppInput _) {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return _input.Dequeue();
        }
        public static implicit operator int(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return int.Parse(_input.Dequeue());
        }
        public static implicit operator long(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return long.Parse(_input.Dequeue());
        }
        public static implicit operator double(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return double.Parse(_input.Dequeue());
        }
    }
    
    public static class CEnumerableExtension 
    {
        public delegate void Function<in T>(T val);
        public static void foreachExtension<T>(this IEnumerable<T> enumerable, Function<T> function) {
            foreach (var x in enumerable) function(x);
        }
    }
}

