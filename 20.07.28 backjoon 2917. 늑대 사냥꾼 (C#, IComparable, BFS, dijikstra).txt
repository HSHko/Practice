/* C# template********************************
20.07.28 backjoon 2917. 늑대 사냥꾼 (C#, IComparable, BFS, dijikstra)

문제
늑대 현우는 피에 굶주린 사냥꾼들에게 벗어나려고 도망치고 있다. 사냥꾼은 매우 
똑똑해서 나무 뒤에 숨어있다. 현우도 이 사실을 알고있다. 하지만, 어떤 나무 뒤에 
사냥꾼들이 숨어있는지 알지 못한다. 현우는 사냥꾼에게 잡히지 않기 위해서 숲의 한
오두막으로 대피하려고 한다. 현우는 나무와 거리가 최대한 떨어지는 경로로 대피하
려고 한다.

숲은 N×M 크기의 그리드로 나타낼 수 있다. 각 칸이 빈 목초지라면 '.', 나무가 
있다면 '+', 현재 현우의 위치는 'V', 오두막의 위치는 'J'로 나타나있다. 현우는 
현재 있는 위치에서 동서남북으로 인접한 칸으로 이동할 수 있고, 나무가 있는 칸
으로도 이동할 수 있다.

만약 현우가 지금 R행 C열에 있고, 나무가 A행 B열에 있다면, 현우와 나무의 거리는
|R-A| + |C-B|이다.

현우는 오두막으로 도망치는 가장 안전한 길로 이동하려고 한다. 가장 안전한 길이란
현우가 이동하는 모든 칸에서 나무와 거리의 최솟값이 가장 큰 경로이다. 또, 오두막
이 있는 칸도 경로의 일부이기 때문에 나무와 거리를 계산해야 한다.

숲의 지도가 주어졌을 때, 가장 안전한 길을 찾는 프로그램을 작성하시오.

입력
첫째 줄에 N과 M (1 ≤ N, M ≤ 500)이 주어진다. 둘째 줄부터 N개 줄에는 숲의 지도가
주어진다. 지도에 'V'와 'J'는 딱 하나만 있고, 적어도 하나의 '+'가 있다.

출력
첫째 줄에 가장 안전한 경로에서 나무와 현우와 거리의 최솟값을 출력한다.

예제 입력 1 
4 4
+...
....
....
V..J
예제 출력 1 
3
*********************************************/


namespace temp_name
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Text;
    using static System.Console;
    using static IOmacro.CsharpInput;
    using static IOmacro.CppInput;
    
    using lib_STL;

    public class Run
    {
        private struct Point : IComparable<Point>
        {
            public int y_, x_, d_;
            public int pass;
            
            public int CompareTo(Point k)
            {
                return this.d_.CompareTo(k.d_);
            }
        }
        
        private struct QryMap
        {
            public int h_, w_;
            public char[,] matMap;
            public int[,] matSafety;
            public Point start;
            public Point dest;
        }
        QryMap qryMap;
        
        
        public void init()
        {
            qryMap.h_ = cin;
            qryMap.w_ = cin;
            qryMap.matMap = new char[qryMap.h_, qryMap.w_];
            
            Queue<Point> queHunter = new Queue<Point>();
            for (int iy = 0; iy < qryMap.h_; iy++) {
                string input = _string;
                for (int ix = 0; ix < qryMap.w_; ix++) {
                    qryMap.matMap[iy, ix] = input[ix];
                    if (input[ix] == '+')
                        queHunter.Enqueue(new Point{y_ = iy, x_ = ix, d_ = 1});
                    if (input[ix] == 'V')
                        qryMap.start = new Point{y_ = iy, x_ = ix, d_ = 0, pass = 0};
                    if (input[ix] == 'J')
                        qryMap.dest = new Point{y_ = iy, x_ = ix, d_ = 0};
                }
            }
            
            qryMap.matSafety = new int[qryMap.h_, qryMap.w_];
            while (queHunter.Any()) {
                var now = queHunter.Dequeue();
                if (qryMap.matSafety[now.y_, now.x_] == 0)
                    qryMap.matSafety[now.y_, now.x_] = 1;
                for (int i = 0; i < 4; i++) {
                    int ny = now.y_ + "2011"[i] - '1';
                    int nx = now.x_ + "1120"[i] - '1';
                    if (!(0 <= ny && ny < qryMap.h_ && 0 <= nx && nx < qryMap.w_))
                        continue;
                    if (qryMap.matSafety[ny, nx] != 0)
                        continue;
                    qryMap.matSafety[ny, nx] = now.d_ + 1;
                    queHunter.Enqueue(new Point{y_ = ny, x_ = nx, d_ = now.d_ + 1});
                }
            }
        }
        
        public void proc()
        {
            var dist = new int[qryMap.h_, qryMap.w_];
            for (int iy = 0; iy < qryMap.h_; iy++)
            for (int ix = 0; ix < qryMap.w_; ix++)
                dist[iy, ix] = -1;
            var pq = new priority_queue<Point>();
            
            pq.push(qryMap.start);
            dist[qryMap.start.y_, qryMap.start.x_] = 0;
            int ans = 10005;
            while (!pq.empty()) {
                var now = pq.top();
                pq.pop();
                
                if (now.y_ == qryMap.dest.y_ && now.x_ == qryMap.dest.x_) {
                    ans = Math.Min(ans, qryMap.matSafety[qryMap.dest.y_, qryMap.dest.x_] - 1);
                    WriteLine(ans);
                    break;
                }
                
                // WriteLine($"{now.y_} {now.x_} {now.d_}");
                
                for (int i = 0; i < 4; i++) {
                    int ny = now.y_ + "2011"[i] - '1';
                    int nx = now.x_ + "1120"[i] - '1';
                    
                    if(!(0 <= ny && ny < qryMap.h_ && 0 <= nx && nx < qryMap.w_))
                        continue;
                    if (dist[ny, nx] != -1)
                        continue;
                    dist[ny, nx] = now.pass + 1;
                    
                    // WriteLine($"{"new"} {ny} {nx} {qryMap.matSafety[ny, nx]}");
                    ans = Math.Min(ans, qryMap.matSafety[ny, nx]);
                    pq.push(new Point{
                        y_ = ny, 
                        x_ = nx, 
                        d_ = qryMap.matSafety[ny, nx], 
                        pass = now.pass + 1
                    });
                }
            }
        }
    }
}

class program
{

    static void Main(string[] args)
    {
        // var exStdIn = new System.IO.StreamReader(@"C:\Users\HAN\Desktop\VSC\input.txt"); System.Console.SetIn(exStdIn);
        var run = new temp_name.Run();
        run.init();
        run.proc();
    }
}


namespace IOmacro
{
    //20.06.29 수정

    using System;
    using System.Linq;
    using System.IO;
    using System.Collections.Generic;

    public class CsharpInput
    {
        public static StreamWriter _writer = new StreamWriter(Console.OpenStandardOutput());
        public const char separator = ' ';
        public static string _string { get { return Console.ReadLine(); } }
        public static string[] _stringa { get { return (Console.ReadLine().Split(separator)); } }
        public static int _int { get { return int.Parse(Console.ReadLine()); } }
        public static int[] _inta { get { return Console.ReadLine().Split(separator).Select(int.Parse).ToArray(); } }
        public static long _long { get { return long.Parse(Console.ReadLine()); } }
        public static long[] _longa { get { return Console.ReadLine().Split(separator).Select(long.Parse).ToArray(); } }
        public static double _double { get { return double.Parse(Console.ReadLine()); } }
        public static double[] _doublea { get { return Console.ReadLine().Split(separator).Select(double.Parse).ToArray(); } }
    }

    public class CppInput
    {
        public static CppInput cin => new CppInput();
        public const char separator = ' ';
        private static readonly Queue<string> _input = new Queue<string>();
        private CppInput() { }
        public static implicit operator string(CppInput _) {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return _input.Dequeue();
        }
        public static implicit operator int(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return int.Parse(_input.Dequeue());
        }
        public static implicit operator long(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return long.Parse(_input.Dequeue());
        }
        public static implicit operator double(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return double.Parse(_input.Dequeue());
        }
    }

    public static class CEnumerableExtension
    {
        public delegate void Function<in T>(T val);
        public static void foreachExtension<T>(this IEnumerable<T> enumerable, Function<T> function)
        {
            foreach (var x in enumerable) function(x);
        }
    }
}

namespace lib_STL
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    
    // 20.07.28 수정
    public class priority_queue<T> where T : IComparable<T>
    {
        private List<T> data;
        
        private void swap(int u, int v)
        {
            T temp = data[u];
            data[u] = data[v];
            data[v] = temp;
        }
        
        public priority_queue()
        {
            this.data = new List<T>();
        }
        
        public bool empty() {
            return data.Count == 0;
        }
        
        public void push(T inT)
        {
            var idx = data.Count;
            data.Add(inT);
            while (idx > 0) {
                int next = (idx - 1)>>1;
                if (data[next].CompareTo(data[idx]) >= 0) break;
                swap(idx, next);
                idx = next;
            }
        }
        
        public T top() {
            if (empty()) throw new OverflowException("ERROR : empty PQ");
            return data[0];
        }
        
        public void pop() {
            if (empty()) throw new OverflowException("ERROR : empty PQ");
            var cnt = data.Count;
            var end = cnt - 1;
            swap(0, end);
            data.RemoveAt(end);
            
            var idx = 0;
            while (end > 0) {
                var cl = (idx<<1) + 1;
                var cr = (idx<<1) + 2;
                if (cr >= end) cr = cl;
                if (cl >= end) cr = cl = idx;
                
                var next = (data[cl].CompareTo(data[cr]) > 0 ? cl : cr);
                if (data[next].CompareTo(data[idx]) > 0) {
                    swap(idx, next);
                    idx = next;
                }
                else {
                    //if (idx == 0) break;
                    //idx = 0;
                    break;
                }
            }
        }
    }
}
