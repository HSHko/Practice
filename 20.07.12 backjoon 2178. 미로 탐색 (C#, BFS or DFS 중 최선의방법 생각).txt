/*********************************************
* c# template
* 
*********************************************/
/*********************************************
20.07.12 backjoon 2178. 미로 탐색 (C#, BFS or DFS 중 최선의방법 생각)

문제
N×M크기의 배열로 표현되는 미로가 있다.

1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1
미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다.
이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야
하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 
때, 서로 인접한 칸으로만 이동할 수 있다.

위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작
위치와 도착 위치도 포함한다.

입력
첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수
로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.

출력
첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 
경우만 입력으로 주어진다.

test input:
4 6
110110
110110
111111
111101

2 25
1011101110111011101110111
1110111011101110111011101
*********************************************/

namespace temp_name
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Text;
    using static System.Console;
    using static IOmacro.CsharpInput; 
    using static IOmacro.CppInput;

    public class Run
    {
        readonly int AISLE = 1;
        
        int nRow;
        int nCol;
        int[][] matMap;
        
        private void init()
        {
            nRow = cin;
            nCol = cin;
            matMap = new int[nRow][].Select(x => new int[nCol]).ToArray();
            
            for (int iy = 0; iy < nRow; iy++) {
                string input = _string;
                for (int ix = 0; ix < nCol; ix++) {
                    matMap[iy][ix] = input[ix] - '0';
                }
            }
        }
        
        private struct Point
        {
            public int y_, x_;
            public int d_;
        }
        
        private void proc()
        {
            var que = new Queue<Point>();
            que.Enqueue(new Point{y_ = 0, x_ = 0, d_ = 1});
            var matVisited = new bool[nRow][].Select(x => new bool[nCol]).ToArray();
            
            Func<int, int, bool> isInArea = (fy, fx) =>
            {
                if (!(0 <= fy && fy < nRow && 0 <= fx && fx < nCol))
                    return false;
                if (matMap[fy][fx] != AISLE)
                    return false;
                if (matVisited[fy][fx] == true)
                    return false;
                return true;
            };
            
            int minPass = 1<<31 - 1;
            while(que.Any()) {
                
                var now = que.Dequeue();
                
                if (matVisited[now.y_][now.x_] == true)
                    continue;
                matVisited[now.y_][now.x_] = true;
                
                if (now.y_ + 1 == nRow && now.x_ +1 == nCol) {
                    minPass = Math.Min(minPass, now.d_);
                    break;
                }
                    
                for (int cnt = 0; cnt < 4; cnt++) {
                    var ny = now.y_ + "2011"[cnt] - '1';
                    var nx = now.x_ + "1120"[cnt] - '1';
                    
                    if (isInArea(ny, nx) == false)
                        continue;
                    que.Enqueue(new Point{y_ = ny, x_ = nx, d_ = now.d_ + 1});
                }
                
            }
            
            WriteLine(minPass);
        }
        
        public void work()
        {
            init();
            proc();
        }
        
    }
}

class program
{
    static void Main()
    {
        var run = new temp_name.Run();
        run.work();
    }
}


namespace IOmacro
{
    //20.06.29 수정
    
    using System; 
    using System.Linq; 
    using System.IO;
    using System.Collections.Generic;
    
    public class CsharpInput 
    {
        public static StreamWriter _writer = new StreamWriter(Console.OpenStandardOutput());
        public const char separator = ' ';
        public static string _string{get{return Console.ReadLine();}}
        public static string[] _stringa{get{return (Console.ReadLine().Split(separator));}}
        public static int _int{get{return int.Parse(Console.ReadLine());}}
        public static int[] _inta{get{return Console.ReadLine().Split(separator).Select(int.Parse).ToArray();}}
        public static long _long{get{return long.Parse(Console.ReadLine());}}
        public static long[] _longa{get{return Console.ReadLine().Split(separator).Select(long.Parse).ToArray();}}    
        public static double _double{get{return double.Parse(Console.ReadLine());}}
        public static double[] _doublea{get{return Console.ReadLine().Split(separator).Select(double.Parse).ToArray();}}    
    }
    
    public class CppInput 
    {
        public static CppInput cin => new CppInput();
        public const char separator = ' ';
        private static readonly Queue<string> _input = new Queue<string>();
        private CppInput(){}
        public static implicit operator string(CppInput _) {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return _input.Dequeue();
        }
        public static implicit operator int(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return int.Parse(_input.Dequeue());
        }
        public static implicit operator long(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return long.Parse(_input.Dequeue());
        }
        public static implicit operator double(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return double.Parse(_input.Dequeue());
        }
    }
    
    public static class CEnumerableExtension 
    {
        public delegate void Function<in T>(T val);
        public static void foreachExtension<T>(this IEnumerable<T> enumerable, Function<T> function) {
            foreach (var x in enumerable) function(x);
        }
    }
}

