/******************************************c++
* 20.04.15 AtCoder Beginner Contest 159. A - The Number of Even Pairs
* https://atcoder.jp/contests/abc159/tasks_print
* 
*********************************************/
/*********************************************

問題文N+M個のボールがあります。
各ボールには整数が1つ書かれています。
これらのボールに書かれている数について、
•N個のボールに書かれている数は偶数
•M個のボールに書かれている数は奇数
であることがわかっています。

これらのN+M個のボールの中から2つ選んで、書かれた数の和が偶数になる方法の数
を求めてください。

::test input::
13 3

*********************************************/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define rep(i,n) for(int (i)=1;(i)<=(n);i++)
#define rez(i,n) for(int (i)=0;(i)<(n);i++)
#define ET "\n"

class Calgorithm {
public:
    Calgorithm(){}; ~Calgorithm(){};
    
    template<typename T>
    T combination(T n, T r);
};

template<typename T>
T Calgorithm::combination(T n, T r){
    if (n == r || r == 0) return 1;
    else return this->combination(n -1, r -1) + this->combination(n -1, r);
}

class CRun{
private:
    struct {
        int N, M;
    }gv;
public:
    CRun(){}; ~CRun(){};
    void build(); void solve();
};

void CRun::build(){
    cin >> gv.N >> gv.M;
}

void CRun::solve(){
    int ans = 0;
    Calgorithm algo;
    
    //NN
    if (gv.N >= 2){
        ans += algo.combination(gv.N, 2);
    }
    
    //MM
    if (gv.M >= 2) {
        ans += algo.combination(gv.M, 2);
    }
    
    //NM
    ;
    
    cout << ans;
    
}

int main(){
    CRun run;
    run.build();
    run.solve();
}






##======================================python3
import sys
import collections
sys.setrecursionlimit(10**6)
input = sys.stdin.readline
import itertools

class Run:
    def build(gv):
        gv.N, gv.M = map(int, input().split())

    def solve(gv):
        ans = 0
        
        p = [0]*gv.N
        q = [0]*gv.M
        ans += len(list(itertools.combinations(p, 2)))
        ans += len(list(itertools.combinations(q, 2)))
        
        print (ans)
        
if __name__ == '__main__':
    run = Run()
    run.build()
    run.solve()





/*******************************************c#
*********************************************/
using System; //Console, IComparable
using System.IO; //StreamWriter 
using System.Linq; //Select(), Where(), OrderBy(), Count()
using System.Collections.Generic; //List<T>
using System.Reflection; //PropertyInfo[], GetProperties[]
using static System.Console; using static NNN.CInput;

namespace Nalgo {
    public class combination {
        public long combs(int n, int r) {
            if (n == r || r == 0) return 1L;
            else return combs(n-1, r-1) + combs(n-1, r);
        }
    }
    
}

namespace NNN {
    
    public class CRun{
        private static class gv{
            public static int N = 0;
            public static int M = 0;
        }
        
        public void build(){
            var input = _inta;
            gv.N = input[0];
            gv.M = input[1];
        }
    
        public void solve(){ StreamWriter so = new StreamWriter(Console.OpenStandardOutput());
            var algo = new Nalgo.combination();
            
            long ans = 0;
            ans += gv.N >= 2 ? algo.combs(gv.N, 2) : 0;
            ans += gv.M >= 2 ? algo.combs(gv.M, 2) : 0;
            WriteLine(ans);
        }
    }

    class Program { 
        static void Main() { 
            var run = new CRun();
            run.build();
            run.solve();
        } 
    }

    public static class CInput{
        public static string _string{get{return Console.ReadLine();}}
        public static string[] _stringa{get{return (Console.ReadLine().Split());}}
        public static int _int{get{return int.Parse(Console.ReadLine());}}
        public static int[] _inta{get{return Console.ReadLine().Split().Select(x=>int.Parse(x)).ToArray();}}
        public static long _long{get{return long.Parse(Console.ReadLine());}}
        public static long[] _longa{get{return Console.ReadLine().Split().Select(x=>long.Parse(x)).ToArray();}}    }
}
