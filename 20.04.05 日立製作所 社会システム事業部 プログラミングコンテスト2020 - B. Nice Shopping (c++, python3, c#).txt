//=========================================c++
/* ===========================================
// 20.04.05 日立製作所 社会システム事業部 プログラミングコンテスト2020 - B. Nice Shopping
// 
// 
=========================================== */
/* ===========================================

あなたは、冷蔵庫と電子レンジを買うために、とある家電量販店に来ました。

この家電量販店では、 A 種類の冷蔵庫と B 種類の電子レンジが販売されています。 
i 番目( 1≤i≤A )の冷蔵庫の値段は ai 円であり、 j 番目( 1≤j≤B )の電子レンジの値段
は bj 円です。また、あなたは M 種類の割引券を所持しており、 i 番目 ( 1≤i≤M )の
割引券では、 xi 番目の冷蔵庫 と yi 番目の電子レンジを同時に買うと、 支払総額が 
ci 円安くなります。ただし、複数の割引券を同時に使うことはできません。

さて、あなたは冷蔵庫と電子レンジをちょうど1 台ずつ買おうと思っています。
かかる金額の最小値を求めてください。

test input:
1 1 2
10
10
1 1 5
1 1 10


2 2 1
3 5
3 5
2 2 2

=========================================== */
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
#define rep(i,n) for(int (i)=1;(i)<=(n);i++)
#define rez(i,n) for(int (i)=0;(i)<(n);i++)
#define ET "\n"
#define CLR(arr) memset(&arr, 0, sizeof(arr))
#define PAIR pair<int, int>
const ll INF = 1LL << 50;

static struct GV{
    int A, B, M;
    vector<int> renzi;
    vector<int> reizo;
}gv;

void build(){
    cin >> gv.A >> gv.B >> gv.M;
    rep (i, gv.A) {
        int buf; cin >> buf;
        gv.renzi.push_back(buf);
    }
    rep (i, gv.B) {
        int buf; cin >> buf;
        gv.reizo.push_back(buf);
    }
}

void solve(){
    
    int renzi_min = *min_element(gv.renzi.begin(), gv.renzi.end());
    int reizo_min = *min_element(gv.reizo.begin(), gv.reizo.end());
    
    int ans = renzi_min + reizo_min;
    
    rez (i, gv.M) {
        int rx, ry, rc;
        cin >> rx >> ry >> rc;
        
        int ans_buf = gv.renzi[rx - 1] + gv.reizo[ry - 1] - rc;
        ans = min(ans, ans_buf);
    }
    
    cout << ans;
}

int main(){
    build();
    solve();
    
}



##======================================python3
import sys
import collections
sys.setrecursionlimit(10**6)

class gv:
    A, B, M = [0,0,0]
    renzi = []
    reizo = []
    
def build():
    gv.A, gv.B, gv.M = map(int, sys.stdin.readline().split(' '))
    *gv.renzi, = map(int, input().split())
    *gv.reizo, = map(int, input().split())

def solve():
    ans = min(gv.renzi) + min(gv.reizo)
    
    for i in range(gv.M):
        rx, ry, rc = map(int, input().split())
        
        ans_buf = gv.renzi[rx -1] + gv.reizo[ry -1] - rc
        ans = min(ans, ans_buf)
    
    print(ans)

if __name__ == '__main__':
    build()
    solve()


//==========================================c#
using System; //Console, IComparable
using System.IO; //StreamWriter 
using System.Linq; //Select(), Where(), OrderBy(), Count()
using System.Collections.Generic; //List<T>

public static class Run{
    private static class gv{
        public static int A, B, M = 0;
        public static List<int> renzi;
        public static List<int> reizo;
    }
    
    public static void build(){
        IOC io = new IOC(); string[] input;
        input = io._stringa;
        gv.A = int.Parse(input[0]);
        gv.B = int.Parse(input[1]);
        gv.M = int.Parse(input[2]);
        
        gv.renzi = Console.ReadLine().Split(' ').Select(int.Parse).ToList();
        gv.reizo = Console.ReadLine().Split(' ').Select(int.Parse).ToList();
    }
    
    public static void solve(){
        StreamWriter so = new StreamWriter(Console.OpenStandardOutput());
        
        var ans = gv.renzi.Min() + gv.reizo.Min();
        
        for (int i = 0; i < gv.M; i++) {
            var input = Console.ReadLine().Split(' ').Select(int.Parse).ToList();
            var rx = input[0];
            var ry = input[1];
            var rc = input[2];
            
            var ans_buf = gv.renzi[rx -1] + gv.reizo[ry -1] - rc;
            ans = Math.Min(ans, ans_buf);
            
        }
        
        Console.WriteLine(ans);
    }
}

class Program { 
    static void Main() { 
        Run.build();
        Run.solve();
    } 
}

public class IOC{
    public int _int{get{return int.Parse(Console.ReadLine());}}
    public int[] _inta{get{return Array.ConvertAll(Console.ReadLine().Split(), int.Parse);}}
    public long _long{get{return long.Parse(Console.ReadLine());}}
    public long[] _longa{get{return Array.ConvertAll(Console.ReadLine().Split(), long.Parse);}}
    public string _string{get{return Console.ReadLine();}}
    public string[] _stringa{get{return (Console.ReadLine().Split());}}
    public double _double{get{return double.Parse(Console.ReadLine());}}
    public double[] _doublea{get{return Array.ConvertAll(Console.ReadLine().Split(), double.Parse);}}
}
