//=========================================c++
/* ===========================================
// 20.03.13 backjoon 1753. 최단경로 (Dajikstra) (cpp, python3, c#)
// 
// 
 ===========================================*/
/* ===========================================

방향그래프가 주어지면 주어진 시작점에서 다른 모든 정점으로의 최단 경로를 
구하는 프로그램을 작성하시오. 단, 모든 간선의 가중치는 10 이하의 자연수이다.

test input:
5 6
1
5 1 1
1 2 2
1 3 3
2 3 4
2 4 5
3 4 6
===========================================*/


#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
#define rep(i,n) for(int (i)=1;(i)<=(n);i++)
#define rez(i,n) for(int (i)=0;(i)<(n);i++)
#define ET "\n"
#define CLR(arr) memset(&arr, 0, sizeof(arr))
#define PAIR pair<int, int>
const ll INF = 1LL << 50;
const int mini = 10e5+5;

struct strGph{
    int to;   //next to
    int wght; //now wght
    
    strGph(int t, int w){
        to = t;
        wght = w;
    }
    
    bool operator<(const strGph &fd) const{
        return wght > fd.wght;
    }
};

void dajikstra(int start, vector<strGph> gph[], ll dist[]){
    priority_queue<strGph> PQ; 
    PQ.emplace(start, 0);
    
    while(!PQ.empty()){
        
        strGph now = PQ.top(); PQ.pop();
        // 만약 지금 꺼낸 것보다 더 짧은 경로를 알고 있다면 지금 꺼낸 것을 무시한다.
        if(now.wght > dist[now.to]) continue;
        
        for(auto next : gph[now.to]){
            // 더 짧은 경로를 발견하면, dist[]를 갱신하고 우선순위 큐에 넣는다.
            if(dist[next.to] > dist[now.to] + (1LL)*next.wght){
                dist[next.to] = dist[now.to] + (1LL)*next.wght;
                PQ.emplace(next.to, dist[next.to]);
            }
        }
    }
}

int main(){
    
    int v; cin >> v;            //number of vertex
    int e; cin >> e;            //number of edge
    int start; cin >> start;    //starting vertex
    
    //building graph
    vector<strGph> gph[e+1];
    rep(i,e){
        int a, n, w; cin >> a >> n >> w;
        gph[a].emplace_back(n, w);
    }
    
    ll dist[v+1]; fill(dist, dist+v+1, INF);
    dist[start] = 0;
    
    dajikstra(start, gph, dist);
    
    rep(i,v){
        ll ans = dist[i];
        if(ans == INF){
            cout << "INF" << ET;
        }
        else{
            cout << ans << ET;
        }
    }
}


'''=====================================python3
''' ===========================================
## 20.03.14
##
##
=========================================== '''
import sys
from sys import stdin
sys.setrecursionlimit(10**6)
input = stdin.readline
import heapq #heappush(trgt, val) heappop(trgt) trgt[0] __lt__<
INF = 10**15

class strGph:
    to = 0
    wght = 0
    
    def __init__(self, t, w):
        self.to = t
        self.wght = w
    def __lt__(a, b):
        return a.wght < b.wght

def dajikstra(start: int, gph: strGph, dist: int):
    hq:strGph = []
    heapq.heappush(hq, strGph(start, 0))
    
    while hq:
        now = heapq.heappop(hq)
        if now.wght > dist[now.to]:
            continue
        
        for next in gph[now.to]:
            #print(now.to, now.wght, next.to, next.wght)
            if dist[next.to] > dist[now.to] + next.wght:
                dist[next.to] = dist[now.to] + next.wght
                heapq.heappush(hq, strGph(next.to, dist[next.to]))
        

if __name__ == '__main__':
    v, e = map(int,input().split())
    start = int(input())
    
    gph:strGph = [[] for i in range(v+1)]
    for _ in range(1, e+1):
        a, b, c = map(int, input().split())
        gph[a].append(strGph(b,c))
    
    dist = [INF]*(v+1)
    dist[start] = 0
    
    dajikstra(start, gph, dist)
    
    for i in range(1,v+1):
        ans = dist[i]
        if ans == INF:
            print('INF')
        else:
            print(ans)

//==========================================c#
/* ===========================================
// 20.03.18
// heap sort, priority_queue implemented
// time over..
=========================================== */
using System; //Console, IComparable
using System.IO; //StreamWriter 
using System.Linq; //Select(), Where(), OrderBy(), Count()
using System.Collections.Generic; //List<T>

public class strGph : IComparable<strGph>{
    public int to;
    public int wght;
    
    public strGph(int t, int w){
        to = t;
        wght = w;
    }
    public int CompareTo(strGph fd){
        return (fd.wght).CompareTo(wght);
    }
}


class Program { 
    
    static void dajikstra(int start, ref List<strGph>[] gph, ref int[] dist){
        var pq = new priority_queue<strGph>();
        pq.push(new strGph(start, 0));
        
        while(!pq.empty()){
            var now = pq.top(); pq.pop();
            
            if(now.wght > dist[now.to]) continue;
            
            foreach(var next in gph[now.to]){
                //Console.WriteLine("{0}, {1}, {2}, {3}", next.to, next.wght, now.to, now.wght);
                if(dist[next.to] > dist[now.to] + next.wght){
                    dist[next.to] = dist[now.to] + next.wght;
                    pq.push(new strGph(next.to, dist[next.to]));
                }
            }
            
        }
    }
    
    static void Main() { 
        StreamWriter so = new StreamWriter(Console.OpenStandardOutput());
        string[] sip; int[] iip;
        
        sip = Console.ReadLine().Split();
        var v = int.Parse(sip[0]);
        var e = int.Parse(sip[1]);
        var start = int.Parse(Console.ReadLine());
        
        var gph = new List<strGph>[v+1];
        for(int i=0; i<gph.Length; i++) gph[i] = new List<strGph>();
        for(int i=1; i<=e; i++){
            iip = Console.ReadLine().Split().Select(fd=>int.Parse(fd)).ToArray();
            gph[iip[0]].Add(new strGph(iip[1],iip[2]) );
        }
        
        var dist = new int[v+1];
        dist = dist.Select(fd=>1000000000).ToArray();
        dist[start] = 0;
        
        dajikstra(start, ref gph, ref dist);
        
        for(int i=1; i<=v; i++){
            var ans = dist[i];
            if(ans == 1000000000){
                so.WriteLine("INF".ToString());
            }
            else{
                so.WriteLine(ans.ToString());
            }
        }
        so.Close();
    } 
}

public class priority_queue<T> where T : IComparable<T>{
    private List<T> data;
    
    private void swp(int u, int v){
        T temp = data[u];
        data[u] = data[v];
        data[v] = temp;
    }
    public priority_queue(){
        this.data = new List<T>();
    }
    public bool empty(){
        return data.Count == 0;
    }
    public void push(T obj){
        var idx = data.Count;
        data.Add(obj);
        while(idx > 0){
            int nxt = (idx -1)>>1;
            if( data[nxt].CompareTo(data[idx]) < 0 ) break;
            swp(idx, nxt);
            idx = nxt;
        }
    }
    public T top(){
        if(empty()) throw new OverflowException("ERROR:empty PQ");
        return data[0];
    }
    public void pop(){
        if(empty()) throw new OverflowException("ERROR:empty PQ");
        var cnt = data.Count;
        swp(0, cnt-1);
        data.RemoveAt(cnt-1);
        cnt--;
        
        var idx = 0;
        while(cnt > 0){
            var cl = (idx<<1)+1;
            var cr = (idx<<1)+2;
            if(cr >= cnt) cr = cl;
            if(cl >= cnt) cr = cl = idx;
            
            var nxt = ( data[cl].CompareTo(data[cr]) < -1 ? cl : cr);
            if( data[nxt].CompareTo(data[idx]) < -1 ){
                swp(idx, nxt);
                idx = nxt;
            }
            else{
                if(idx == 0) break;
                idx = 0;
            }
        }
    }
}
