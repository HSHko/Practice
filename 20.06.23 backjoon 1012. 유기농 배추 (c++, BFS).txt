/*********************************************
* c++ template
* 
*********************************************/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define et "\n"

/*********************************************
20.06.23 backjoon 1012. 유기농 배추 (c++, BFS)

차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 
농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 
중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 
이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 
특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 
다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다.

(한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있다고 
간주한다)

한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어놓았다. 
배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 서로 
인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 
필요한지 알 수 있다.

예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 
필요하다.

(0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.)

1	1	0	0	0	0	0	0	0	0
0	1	0	0	0	0	0	0	0	0
0	0	0	0	1	0	0	0	0	0
0	0	0	0	1	0	0	0	0	0
0	0	1	1	0	0	0	1	1	1
0	0	0	0	1	0	0	1	1	1


각 테스트 케이스에 대해 필요한 최소의 배추흰지렁이 마리 수를 출력한다.

입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다.
그 다음 줄부터 각각의 테스트 케이스에 대해 첫째 줄에는 배추를 심은
배추밭의 가로길이 M(1 ≤ M ≤ 50)과 세로길이 N(1 ≤ N ≤ 50), 그리고 배추가 
심어져 있는 위치의 개수 K(1 ≤ K ≤ 2500)이 주어진다. 그 다음 K줄에는 배추의
위치 X(0 ≤ X ≤ M-1), Y(0 ≤ Y ≤ N-1)가 주어진다.

test input:
2
10 8 17
0 0
1 0
1 1
4 2
4 3
4 5
2 4
3 4
7 4
8 4
9 4
7 5
8 5
9 5
7 6
8 6
9 6
10 10 1
5 5
*********************************************/
struct Spoint
{
    int y_;
    int x_;
    int d_;
};

struct Spara
{
    int h_;
    int w_;
    unique_ptr<unique_ptr<int[]>[]> arrAreaStat_;
    unique_ptr<unique_ptr<bool[]>[]> arrAreaVisited_;
    queue<Spoint> queInit_;
};

Spara init()
{
    Spara para;
    
    cin >> para.w_;
    cin >> para.h_;
    para.arrAreaStat_ = make_unique<unique_ptr<int[]>[]>(para.h_);
    para.arrAreaVisited_ = make_unique<unique_ptr<bool[]>[]>(para.h_);
    for (int iy = 0; iy < para.h_; iy++) {
        para.arrAreaStat_[iy] = make_unique<int[]>(para.w_);
        para.arrAreaVisited_[iy] = make_unique<bool[]>(para.w_);
    }
    
    int numInput; cin >> numInput;
    while (numInput-- > 0) {
        int x; cin >> x;
        int y; cin >> y;
        para.queInit_.push(Spoint{y, x, 0});
        para.arrAreaStat_[y][x] += 1;
    }
    
    return para;
}

int proc(Spara &para)
{
    int numButterfly = 0;
    
    auto isInArea = [&](int fy, int fx)
    {
        if (0 <= fy && fy < para.h_ && 0 <= fx && fx < para.w_) {
            if (para.arrAreaVisited_[fy][fx] == false && para.arrAreaStat_[fy][fx] > 0) {
                return true;
            }
        }
        return false;
    };
    
    auto BFS = [&](auto now) {
        bool res = false;
        
        if (para.arrAreaVisited_[now.y_][now.x_] == true)
            return res;
        
        res = true;
        
        para.arrAreaVisited_[now.y_][now.x_] = true;
        queue<Spoint> queBFS;
        queBFS.push(now);
        while (!queBFS.empty()) {
            auto next = queBFS.front(); queBFS.pop();
            for (int i = 0; i < 4; i++) {
                int ny = next.y_ + "2011"[i] - '1';
                int nx = next.x_ + "1120"[i] - '1';
                int nd = next.d_ + 1;
                
                
                if (isInArea(ny, nx) == false)
                    continue;
                
                para.arrAreaVisited_[ny][nx] = true;
                queBFS.push(Spoint{ny, nx, nd});
            }
        }
        return res;
    };
    
    while (!para.queInit_.empty()) {
        auto now = para.queInit_.front(); para.queInit_.pop();
        if (BFS(now) == true) {
            numButterfly += 1;
        }
    }
    
    return numButterfly;
}

int main()
{
    int numTest; cin >> numTest;
    while (numTest-- > 0) {
        int numButterfly = 0;
        Spara para = init();
        numButterfly = proc(para);
        cout << numButterfly << et;
    }
}


