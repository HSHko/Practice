/*********************************************
* c# template
* 
*********************************************/

namespace TempName{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Text;
    using static System.Console;
    using static IOmacro.CsharpInput; 
    using static IOmacro.CppInput;

/*********************************************
20.06.23 backjoon 1012. 유기농 배추 (C#, BFS)

차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 
농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 
중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 
이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 
특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 
다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다.

(한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있다고 
간주한다)

한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어놓았다. 
배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 서로 
인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 
필요한지 알 수 있다.

예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 
필요하다.

(0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.)

1	1	0	0	0	0	0	0	0	0
0	1	0	0	0	0	0	0	0	0
0	0	0	0	1	0	0	0	0	0
0	0	0	0	1	0	0	0	0	0
0	0	1	1	0	0	0	1	1	1
0	0	0	0	1	0	0	1	1	1


각 테스트 케이스에 대해 필요한 최소의 배추흰지렁이 마리 수를 출력한다.

입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다.
그 다음 줄부터 각각의 테스트 케이스에 대해 첫째 줄에는 배추를 심은
배추밭의 가로길이 M(1 ≤ M ≤ 50)과 세로길이 N(1 ≤ N ≤ 50), 그리고 배추가 
심어져 있는 위치의 개수 K(1 ≤ K ≤ 2500)이 주어진다. 그 다음 K줄에는 배추의
위치 X(0 ≤ X ≤ M-1), Y(0 ≤ Y ≤ N-1)가 주어진다.

test input:
2
10 8 17
0 0
1 0
1 1
4 2
4 3
4 5
2 4
3 4
7 4
8 4
9 4
7 5
8 5
9 5
7 6
8 6
9 6
10 10 1
5 5
*********************************************/
    public class Run
    {
        public struct Point
        {
            
            public Point(int y, int x, int d)
            {
                this.y_ = y;
                this.x_ = x;
                this.d_ = d;
            }
            public int y_;
            public int x_;
            public int d_;
            
        }
        
        public struct Parameter
        {
            public int h_;
            public int w_;
            public int[,] arrAreaStat_;
            public bool[,] arrAreaVisited_;
            public Queue<Point> queInit_;
        }
        
        public Parameter init()
        {
            var para = new Parameter();
            para.w_ = cin;
            para.h_ = cin;
            para.arrAreaStat_ = new int[para.h_, para.w_];
            para.arrAreaVisited_ = new bool[para.h_, para.w_];
            
            para.queInit_ = new Queue<Point>();
            int numQry = cin;
            while(numQry-- > 0) {
                int ix = cin;
                int iy = cin;
                para.arrAreaStat_[iy, ix] += 1;
                para.queInit_.Enqueue(new Point(iy, ix, 0));
            }
            
            return para;
        }
        
        public bool BFS(Point start, ref Parameter para)
        {
            bool res = false;
            
            Func<int, int, Parameter, bool> isInArea = (fy, fx, fPara) => {
                if (0 <= fy && fy < fPara.h_ && 0 <= fx && fx < fPara.w_) {
                    if (fPara.arrAreaVisited_[fy, fx] == false && fPara.arrAreaStat_[fy, fx] != 0) {
                        return true;
                    }
                }
                return false;
            };
            
            
            if (para.arrAreaVisited_[start.y_, start.x_] != false)
                return res;
            
            res = true;
            
            var queProc = new Queue<Point>();
            queProc.Enqueue(start);
            para.arrAreaVisited_[start.y_, start.x_] = true;
            
            while (queProc.Any()) {
                var now = queProc.Dequeue();
                
                for (int i = 0; i < 4; i++) {
                    var ny = now.y_ + "2011"[i] - '1';
                    var nx = now.x_ + "1120"[i] - '1';
                    var nd = now.d_ + 1;
                    
                    if (isInArea(ny, nx, para) == false)
                        continue;
                    
                    para.arrAreaVisited_[ny, nx] = true;
                    queProc.Enqueue(new Point(ny, nx, nd));
                }
            }
            
            return res;
        }
        
        public void proc()
        {
            int numTestCase = cin;
            while (numTestCase-- > 0) {
                int numButterfly = 0;
                Parameter para = init();
                while (para.queInit_.Any()) {
                    numButterfly += (BFS(para.queInit_.Dequeue(), ref para) == true ? 1 : 0);
                    
                }
                WriteLine(numButterfly);
            }
        }
    }
    
    class Program 
    { 
        static void Main() 
        { 
            var run = new Run();
            run.proc();
        } 
    }
}

namespace IOmacro {
    //20.06.23 수정
    
    using System; 
    using System.Linq; 
    using System.IO;
    using System.Collections.Generic;
    
    public class CsharpInput {
        public static StreamWriter _writer = new StreamWriter(Console.OpenStandardOutput());
        public const char separator = ' ';
        public static string _string{get{return Console.ReadLine();}}
        public static string[] _stringa{get{return (Console.ReadLine().Split(separator));}}
        public static int _int{get{return int.Parse(Console.ReadLine());}}
        public static int[] _inta{get{return Console.ReadLine().Split(separator).Select(int.Parse).ToArray();}}
        public static long _long{get{return long.Parse(Console.ReadLine());}}
        public static long[] _longa{get{return Console.ReadLine().Split(separator).Select(long.Parse).ToArray();}}    
        public static double _double{get{return double.Parse(Console.ReadLine());}}
        public static double[] _doublea{get{return Console.ReadLine().Split(separator).Select(double.Parse).ToArray();}}    
    }
    
    public class CppInput {
        public static CppInput cin => new CppInput();
        public const char separator = ' ';
        private static readonly Queue<string> _input = new Queue<string>();
        private CppInput(){}
        public static implicit operator string(CppInput _) {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return _input.Dequeue();
        }
        public static implicit operator int(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return int.Parse(_input.Dequeue());
        }
        public static implicit operator long(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return long.Parse(_input.Dequeue());
        }
        public static implicit operator double(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return double.Parse(_input.Dequeue());
        }
    }
    
    public static class CEnumerableExtension {
        public delegate void Function<in T>(T val);
        public static void foreachExtension<T>(this IEnumerable<T> enumerable, Function<T> function) {
            foreach (var x in enumerable) function(x);
        }
    }
}

