/*********************************************
* c++ template
* 
*********************************************/
#include <bits/stdc++.h>
using namespace std;
#define et "\n"

/*********************************************
20.06.24 backjoon 1058. 친구 (C++, network graph, BFS)

지민이는 세계에서 가장 유명한 사람이 누구인지 궁금해졌다. 
가장 유명한 사람을 구하는 방법은 각 사람의 2-친구를 구하면 된다. 
어떤 사람 A가 또다른 사람 B의 2-친구가 되기 위해선, 두 사람이 친구이거나, A와 친구이고, 
B와 친구인 C가 존재해야 된다. 여기서 가장 유명한 사람은 2-친구의 수가 가장 많은 사람이다. 
가장 유명한 사람의 2-친구의 수를 출력하는 프로그램을 작성하시오.

A와 B가 친구면, B와 A도 친구이고, A와 A는 친구가 아니다.

첫째 줄에 사람의 수 N이 주어진다. N은 50보다 작거나 같은 자연수이다. 
둘째 줄부터 N개의 줄에 각 사람이 친구이면 Y, 아니면 N이 주어진다. (예제를 참고)

test input:
3
NYY
YNY
YYN
*********************************************/

int numPeople = 0;
unique_ptr<vector<int>[]> gph;

void init()
{
    cin >> numPeople;
    gph = make_unique<vector<int>[]>(numPeople + 1);
    
    for (int k = 1; k <= numPeople; k++) {
        string input; 
        cin >> input;
        for (int ix = 0; ix < input.length(); ix++) {
            if (input[ix] == 'Y') {
                gph[k].push_back(ix + 1);
            }
        }
    }
}

void proc()
{
    int numMostPopularPersonsFriends = 0;
    
    struct Point
    {
       int p;
       int d;
    };
    
    bool arrFriendFlag[numPeople + 1];
    for (int k = 1; k <= numPeople; k++) {
        memset(&arrFriendFlag, 0, sizeof(arrFriendFlag));
        int numFriendNow = 0;
        
        queue<Point> que;
        que.push(Point{k, 0});
        arrFriendFlag[k] = true;
        while(!que.empty()) {
            auto now = que.front();
            que.pop();
            
            if (now.d >= 2)
                continue;
            
            for (auto &x : gph[now.p]) {
                if (arrFriendFlag[x] == false) {
                    arrFriendFlag[x] = true;
                    numFriendNow += 1;
                    que.push(Point{x, now.d + 1});
                }
            }
        }
        
        numMostPopularPersonsFriends = max(numMostPopularPersonsFriends, numFriendNow);
    }
    
    cout << numMostPopularPersonsFriends << et;
}

int main()
{
    init();
    proc();
}


