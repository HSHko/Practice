//=========================================c++
/* ===========================================
// 20.04.15 AtCoder Beginner Contest 160. E - Red and Green Apples
// https://atcoder.jp/contests/abc160/tasks/abc160_e
// 
=========================================== */
/* ===========================================
問題文
あなたは、X個の赤色のリンゴとY個の緑色のリンゴを食べようとしています。
あなたはA個の赤色のリンゴを持っており、美味しさはそれぞれp1,p2,…,pAです。
あなたはB個の緑色のリンゴを持っており、美味しさはそれぞれq1,q2,…,qBです。
あなたはC個の無色のリンゴを持っており、美味しさはそれぞれr1,r2,…,rCです。
無色のリンゴは食べる前に着色することで、赤色のリンゴもしくは緑色のリンゴと
見なすことができます。
以上のリンゴの中から、できるだけ美味しさの総和が大きくなるように食べるリンゴ
を選びます。0個以上の無色のリンゴに適切に着色したとき、食べるX+Y個のリンゴの
美味しさの総和が最大でいくつになるか求めてください。

::test input::
1 2 2 2 1
2 4
5 1
3

=========================================== */
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define rep(i,n) for(int (i)=1;(i)<=(n);i++)
#define rez(i,n) for(int (i)=0;(i)<(n);i++)
#define ET "\n"

class CRun{
private:
    struct {
        int X = 0;
        int Y = 0;
        int A; vector<int> p;
        int B; vector<int> q;
        int C; vector<int> r;
        
    }gv;
public:
    CRun(){}; ~CRun(){};
    void build(); void solve();
};


void CRun::build(){
    
    cin >> gv.X >> gv.Y >> gv.A >> gv.B >> gv.C;
    rez (i, gv.A) {
        int k; cin >> k;
        gv.p.push_back(k);
    }
    rez (i, gv.B) {
        int k; cin >> k;
        gv.q.push_back(k);
    }
    rez (i, gv.C) {
        int k; cin >> k;
        gv.r.push_back(k);
    }
}

void CRun::solve(){
    
    sort(gv.p.begin(), gv.p.end(), greater<int>());
    sort(gv.q.begin(), gv.q.end(), greater<int>());
    sort(gv.r.begin(), gv.r.end(), greater<int>());
    
    int pCnt = 0, qCnt = 0, rCnt = 0;
    ll ans = 0;
    int cntDown = gv.X + gv.Y;
    
    while (1) {
        
        if (--cntDown < 0) break;
        
        int pNow = (pCnt < gv.X ? gv.p[pCnt] : -1 );
        int qNow = (qCnt < gv.Y ? gv.q[qCnt] : -1 );
        int rNow = (rCnt < gv.r.size() ? gv.r[rCnt] : -1 );
        
        if (rNow >= pNow && rNow >= qNow) {
            ans += rNow;
            rCnt++;
        }
        else if (pNow >= qNow) {
            ans += pNow;
            pCnt++;
        }
        else {
            ans += qNow;
            qCnt++;
        }
    }
    
    cout << ans;
    
}


int main(){
    CRun run;
    run.build();
    run.solve();
}





#python3
import sys
import collections
sys.setrecursionlimit(10**6)
input = sys.stdin.readline

class Run:
    def build(gv):
        
        gv.X, gv.Y, gv.A, gv.B, gv.C = map(int, input().split())
        gv.p = sorted(map(int, input().split()), reverse=True)
        gv.q = sorted(map(int, input().split()), reverse=True)
        gv.r = sorted(map(int, input().split()), reverse=True)

    def solve(gv):
        
        #new vars
        pCnt = 0; qCnt = 0; rCnt = 0
        ans = 0
        cntDown = gv.X + gv.Y
        
        while True:
            if cntDown <= 0: break
            cntDown -= 1
            
            #new vars
            pNow = gv.p[pCnt] if pCnt < gv.X else -1
            qNow = gv.q[qCnt] if qCnt < gv.Y else -1
            rNow = gv.r[rCnt] if rCnt < len(gv.r) else -1
            
            if rNow >= pNow and rNow >= qNow:
                ans += rNow
                rCnt += 1
            elif pNow >= qNow:
                ans += pNow
                pCnt += 1
            else:
                ans += qNow
                qCnt +=1
        
        print(ans)
            
        
if __name__ == '__main__':
    run = Run()
    run.build()
    run.solve()




//c#
using System; //Console, IComparable
using System.IO; //StreamWriter 
using System.Linq; //Select(), Where(), OrderBy(), Count()
using System.Collections.Generic; //List<T>
using System.Reflection; //PropertyInfo[], GetProperties[]
using static System.Console; using static NNN.CInput;

namespace NNN{
    public class CRun{
        private static class gv{
            public static int X {get; set;} = 0;
            public static int Y {get; set;} = 0;
            public static int A {get; set;} = 0;
            public static int B {get; set;} = 0;
            public static int C {get; set;} = 0;
            public static int[] p, q, r;
        }
    
        public void build(){ string[] input;
            input = _stringa;
            var pi = typeof(gv).GetProperties();
            for (int i = 0; i < 5; i++) {
                pi[i].SetValue(typeof(gv), int.Parse(input[i]));
            }
            gv.p = _inta;
            gv.q = _inta;
            gv.r = _inta;
        }
        
        public void solve(){ StreamWriter stream_out = new StreamWriter(Console.OpenStandardOutput());
            Array.Sort(gv.p, (x,y) => y - x);
            Array.Sort(gv.q, (x,y) => y - x);
            Array.Sort(gv.r, (x,y) => y - x);
            
            var pCnt = 0;
            var qCnt = 0;
            var rCnt = 0;
            var ans = 0L; //long
            var cntDown = gv.X + gv.Y;
            
            while (true) {
                
                if (cntDown <= 0) break;
                
                var pNow = (pCnt < gv.X ? gv.p[pCnt] : -1);
                var qNow = (qCnt < gv.Y ? gv.q[qCnt] : -1);
                var rNow = (rCnt < gv.r.Length ? gv.r[rCnt] : -1);
                
                //WriteLine($"{pCnt}, {qCnt}, {rCnt}");
                //WriteLine($"{pNow}, {qNow}, {rNow}");
                
                if (rNow >= pNow && rNow >= qNow) {
                    ans += rNow;
                    rCnt++;
                }
                else if (pNow >= qNow) {
                    ans += pNow;
                    pCnt++;
                }
                else {
                    ans += qNow;
                    qCnt++;
                }
                
                cntDown -= 1;
            }
            
            WriteLine(ans);
            
        }
    }

    class Program { 
        static void Main() { 
            var run = new CRun();
            run.build();
            run.solve();
        } 
    }

    public static class CInput{
        public static string _string{get{return Console.ReadLine();}}
        public static string[] _stringa{get{return (Console.ReadLine().Split());}}
        public static int _int{get{return int.Parse(Console.ReadLine());}}
        public static int[] _inta{get{return Console.ReadLine().Split().Select(x=>int.Parse(x)).ToArray();}}
        public static long _long{get{return long.Parse(Console.ReadLine());}}
        public static long[] _longa{get{return Console.ReadLine().Split().Select(x=>long.Parse(x)).ToArray();}}
    }
}

