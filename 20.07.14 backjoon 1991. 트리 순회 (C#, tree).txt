/*********************************************
* c# template
* 
*********************************************/
/*********************************************
20.07.14 backjoon 1991. 트리 순회 (C#, tree)

이진 트리를 입력받아 전위 순회(preorder traversal), 중위 순회(inorder 
traversal), 후위 순회(postorder traversal)한 결과를 출력하는 프로그램을
작성하시오.

예를 들어 위와 같은 이진 트리가 입력되면,

전위 순회한 결과 : ABDCEFG // (루트) (왼쪽 자식) (오른쪽 자식)
중위 순회한 결과 : DBAECFG // (왼쪽 자식) (루트) (오른쪽 자식)
후위 순회한 결과 : DBEGFCA // (왼쪽 자식) (오른쪽 자식) (루트)
가 된다.

첫째 줄에는 이진 트리의 노드의 개수 N(1≤N≤26)이 주어진다. 둘째 줄부터 N개의
줄에 걸쳐 각 노드와 그의 왼쪽 자식 노드, 오른쪽 자식 노드가 주어진다. 노드의
이름은 A부터 차례대로 영문자 대문자로 매겨지며, 항상 A가 루트 노드가 된다. 
자식 노드가 없는 경우에는 .으로 표현된다.

출력
첫째 줄에 전위 순회, 둘째 줄에 중위 순회, 셋째 줄에 후위 순회한 결과를 출력
한다. 각 줄에 N개의 알파벳을 공백 없이 출력하면 된다.

예제 입력 1 
7
A B C
B D .
C E F
E . .
F . G
D . .
G . .
예제 출력 1 
ABDCEFG
DBAECFG
DBEGFCA
*********************************************/

namespace temp_name
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Text;
    using static System.Console;
    using static IOmacro.CsharpInput; 
    using static IOmacro.CppInput;

    public class Run
    {
        // C#에서 구조체는 16바이트 이하일때만 사용하자.
        private class Node
        {
            public char data;
            public Node left, right;
            
            public Node (char inData)
            {
                this.data = inData;
            }
        }
        
        private class Tree
        {
            public Node root = new Node('\0');
            
            public void add(char inData, char inLeft, char inRight)
            {
                if (root.data == 0) {
                        root = new Node(inData);
                    if (inLeft != '.')
                        root.left = new Node(inLeft);
                    if (inRight != '.')
                        root.right = new Node(inRight);
                }
                else search(root, inData, inLeft, inRight);
            }
            
            private void search(Node root, char inData, char inLeft, char inRight)
            {
                if (root.data == 0) {
                    return;
                }
                else if (root.data == inData) {
                    if (inLeft != '.') root.left = new Node(inLeft);
                    if (inRight != '.') root.right = new Node(inRight);
                }
                else {
                    if (root.left != null) search (root.left, inData, inLeft, inRight);
                    if (root.right != null) search (root.right, inData, inLeft, inRight);
                }
            }
            
            public void leftOrder(Node root)
            {
                Write(root.data);
                if (root.left != null) leftOrder(root.left);
                if (root.right != null) leftOrder(root.right);
            }
            
            public void midOrder(Node root)
            {
                if (root.left != null) midOrder(root.left);
                Write(root.data);
                if (root.right != null) midOrder(root.right);
            }
            
            public void rightOrder(Node root)
            {
                if (root.left != null) rightOrder(root.left);
                if (root.right != null) rightOrder(root.right);
                Write(root.data);
            }
        }
        
        
        
        private void init()
        {
            
        }
        
        private void proc()
        {
            int numQry = _int;
            var tree = new Tree();
            
            while (numQry-- > 0) {
                var input = ReadLine().Split().Select(char.Parse).ToArray();
                tree.add(input[0], input[1], input[2]);
            }
            
            tree.leftOrder(tree.root);
            WriteLine();
            tree.midOrder(tree.root);
            WriteLine();
            tree.rightOrder(tree.root);
            WriteLine();
        }
        
        public void work()
        {
            init();
            proc();
        }
        
    }
}

class program
{
    static void Main()
    {
        var run = new temp_name.Run();
        run.work();
    }
}


namespace IOmacro
{
    //20.06.29 수정
    
    using System; 
    using System.Linq; 
    using System.IO;
    using System.Collections.Generic;
    
    public class CsharpInput 
    {
        public static StreamWriter _writer = new StreamWriter(Console.OpenStandardOutput());
        public const char separator = ' ';
        public static string _string{get{return Console.ReadLine();}}
        public static string[] _stringa{get{return (Console.ReadLine().Split(separator));}}
        public static int _int{get{return int.Parse(Console.ReadLine());}}
        public static int[] _inta{get{return Console.ReadLine().Split(separator).Select(int.Parse).ToArray();}}
        public static long _long{get{return long.Parse(Console.ReadLine());}}
        public static long[] _longa{get{return Console.ReadLine().Split(separator).Select(long.Parse).ToArray();}}    
        public static double _double{get{return double.Parse(Console.ReadLine());}}
        public static double[] _doublea{get{return Console.ReadLine().Split(separator).Select(double.Parse).ToArray();}}    
    }
    
    public class CppInput 
    {
        public static CppInput cin => new CppInput();
        public const char separator = ' ';
        private static readonly Queue<string> _input = new Queue<string>();
        private CppInput(){}
        public static implicit operator string(CppInput _) {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return _input.Dequeue();
        }
        public static implicit operator int(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return int.Parse(_input.Dequeue());
        }
        public static implicit operator long(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return long.Parse(_input.Dequeue());
        }
        public static implicit operator double(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return double.Parse(_input.Dequeue());
        }
    }
    
    public static class CEnumerableExtension 
    {
        public delegate void Function<in T>(T val);
        public static void foreachExtension<T>(this IEnumerable<T> enumerable, Function<T> function) {
            foreach (var x in enumerable) function(x);
        }
    }
}

