/*********************************************
* c# template
* 
*********************************************/

namespace TempName{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Text;
    using static System.Console;
    using static IOmacro.CsharpInput; 
    using static IOmacro.CppInput;

/*********************************************
20.06.24 backjoon 1058. 친구 (C#, graph, BFS)

지민이는 세계에서 가장 유명한 사람이 누구인지 궁금해졌다. 
가장 유명한 사람을 구하는 방법은 각 사람의 2-친구를 구하면 된다. 
어떤 사람 A가 또다른 사람 B의 2-친구가 되기 위해선, 두 사람이 친구이거나, A와 친구이고, 
B와 친구인 C가 존재해야 된다. 여기서 가장 유명한 사람은 2-친구의 수가 가장 많은 사람이다. 
가장 유명한 사람의 2-친구의 수를 출력하는 프로그램을 작성하시오.

A와 B가 친구면, B와 A도 친구이고, A와 A는 친구가 아니다.

첫째 줄에 사람의 수 N이 주어진다. N은 50보다 작거나 같은 자연수이다. 
둘째 줄부터 N개의 줄에 각 사람이 친구이면 Y, 아니면 N이 주어진다. (예제를 참고)

test input:
3
NYY
YNY
YYN
*********************************************/
    public class Run
    {
        int numPeople = 0;
        List<int>[] gph;
        
        public void init() 
        {
            numPeople = cin;
            gph = new List<int>[numPeople + 1].Select(x => new List<int>()).ToArray();
            
            for (int k = 1; k <= numPeople; k++) {
                string input = _string;
                for (int ix = 0; ix < input.Length; ix++) {
                    if (input[ix] == 'Y') {
                        gph[k].Add(ix + 1);
                    }
                }
            }
        }
        
        public struct Point
        {
            public int n_;
            public int d_;
        }
        
        public void proc() 
        {
            int numFriendOfMostPouplarOne = 0;
            
            for (int k = 1; k <= numPeople; k++) {
                var arrFriendFlag = new bool[numPeople + 1];
                
                var start = new Point{n_ = k, d_ = 0};
                var que = new Queue<Point>();
                que.Enqueue(start);
                
                int numFriendNow = 0;
                arrFriendFlag[start.n_] = true;
                while(que.Any()) {
                    var now = que.Dequeue();
                    
                    foreach (var next in gph[now.n_]) {
                        
                        if (now.d_ >= 2)
                            continue;
                        if (arrFriendFlag[next] == true)
                            continue;
                        
                        arrFriendFlag[next] = true;
                        
                        numFriendNow += 1;
                        
                        if (now.d_ <= 1)
                            que.Enqueue(new Point{n_ = next, d_ = now.d_ + 1});
                    }
                }
                
                numFriendOfMostPouplarOne = Math.Max(numFriendOfMostPouplarOne, numFriendNow);
            }
            
            WriteLine(numFriendOfMostPouplarOne);
        }
    }
    
    class Program 
    { 
        static void Main() 
        { 
            var run = new Run();
            run.init();
            run.proc();
        } 
    }
}

namespace IOmacro {
    //20.06.23 수정
    
    using System; 
    using System.Linq; 
    using System.IO;
    using System.Collections.Generic;
    
    public class CsharpInput {
        public static StreamWriter _writer = new StreamWriter(Console.OpenStandardOutput());
        public const char separator = ' ';
        public static string _string{get{return Console.ReadLine();}}
        public static string[] _stringa{get{return (Console.ReadLine().Split(separator));}}
        public static int _int{get{return int.Parse(Console.ReadLine());}}
        public static int[] _inta{get{return Console.ReadLine().Split(separator).Select(int.Parse).ToArray();}}
        public static long _long{get{return long.Parse(Console.ReadLine());}}
        public static long[] _longa{get{return Console.ReadLine().Split(separator).Select(long.Parse).ToArray();}}    
        public static double _double{get{return double.Parse(Console.ReadLine());}}
        public static double[] _doublea{get{return Console.ReadLine().Split(separator).Select(double.Parse).ToArray();}}    
    }
    
    public class CppInput {
        public static CppInput cin => new CppInput();
        public const char separator = ' ';
        private static readonly Queue<string> _input = new Queue<string>();
        private CppInput(){}
        public static implicit operator string(CppInput _) {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return _input.Dequeue();
        }
        public static implicit operator int(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return int.Parse(_input.Dequeue());
        }
        public static implicit operator long(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return long.Parse(_input.Dequeue());
        }
        public static implicit operator double(CppInput _){
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return double.Parse(_input.Dequeue());
        }
    }
    
    public static class CEnumerableExtension {
        public delegate void Function<in T>(T val);
        public static void foreachExtension<T>(this IEnumerable<T> enumerable, Function<T> function) {
            foreach (var x in enumerable) function(x);
        }
    }
}

