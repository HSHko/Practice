/* C# template********************************
20.07.27 backjoon 1922. 네트워크 연결 (C#, kruskal algorithm)

문제
도현이는 컴퓨터와 컴퓨터를 모두 연결하는 네트워크를 구축하려 한다. 하지만 아쉽게도 허브가 있지 않아 
컴퓨터와 컴퓨터를 직접 연결하여야 한다. 그런데 모두가 자료를 공유하기 위해서는 모든 컴퓨터가 연결이 
되어 있어야 한다. (a와 b가 연결이 되어 있다는 말은 a에서 b로의 경로가 존재한다는 것을 의미한다. a에서
b를 연결하는 선이 있고, b와 c를 연결하는 선이 있으면 a와 c는 연결이 되어 있다.)

그런데 이왕이면 컴퓨터를 연결하는 비용을 최소로 하여야 컴퓨터를 연결하는 비용 외에 다른 곳에 돈을 더
쓸 수 있을 것이다. 이제 각 컴퓨터를 연결하는데 필요한 비용이 주어졌을 때 모든 컴퓨터를 연결하는데 필
요한 최소비용을 출력하라. 모든 컴퓨터를 연결할 수 없는 경우는 없다.

입력
첫째 줄에 컴퓨터의 수 N (1 ≤ N ≤ 1000)가 주어진다.
둘째 줄에는 연결할 수 있는 선의 수 M (1 ≤ M ≤ 100,000)가 주어진다.
셋째 줄부터 M+2번째 줄까지 총 M개의 줄에 각 컴퓨터를 연결하는데 드는 비용이 주어진다. 이 비용의 정보
는 세 개의 정수로 주어지는데, 만약에 a b c 가 주어져 있다고 하면 a컴퓨터와 b컴퓨터를 연결하는데 비용
이 c (1 ≤ c ≤ 10,000) 만큼 든다는 것을 의미한다. a와 b는 같을 수도 있다.

출력
모든 컴퓨터를 연결하는데 필요한 최소비용을 첫째 줄에 출력한다.

예제 입력 1 
6
9
1 2 5
1 3 4
2 3 2
2 4 7
3 4 6
3 5 11
4 5 3
4 6 8
5 6 8

예제 출력 1 
23
*********************************************/


namespace temp_name
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Text;
    using static System.Console;
    using static IOmacro.CsharpInput;
    using static IOmacro.CppInput;
    
    using lib_algo;

    public class Run
    {
        private struct Gph
        {
            public int src, dest, wght;
        }
        int E_, V_;
        List<Gph> gph;
        UnionFind uf;

        public void init()
        {
            this.V_ = _int;  // vertexs
            this.E_ = _int;  // edges

            gph = new List<Gph>();
            for (int i = 0; i < E_; i++) {
                int[] input = _inta;
                gph.Add(new Gph{
                    src = input[0], dest = input[1], wght = input[2]});
            }
            gph.Sort((a, b) => a.wght.CompareTo(b.wght));
            uf = new UnionFind(V_);
        }

        private void kruskal()
        {
            int sum = 0;
            
            for (int i = 0; i < E_; i++) {
                
                int pt1 = uf.find(gph[i].src);
                int pt2 = uf.find(gph[i].dest);
                
                if (pt1 == pt2)
                    continue;
                uf.unite(pt1, pt2);
                // WriteLine($"{i} {gph[i].src} {gph[i].dest}");
                sum += gph[i].wght;
            }
            
            
            WriteLine(sum);
        }

        public void proc()
        {
            kruskal();
        }
    }
}

class program
{

    static void Main(string[] args)
    {
        //var exStdIn = new System.IO.StreamReader(@"C:\Users\HAN\Desktop\VSC\input.txt"); System.Console.SetIn(exStdIn);
        var run = new temp_name.Run();
        run.init();
        run.proc();
    }
}

namespace lib_algo
{
    public class UnionFind
    {
        public int[] parents;
        public int[] ranks;

        public UnionFind(int n)
        {
            parents = new int[n + 1];
            ranks = new int[n + 1];
            for (int i = 1; i <= n; i++) {
                parents[i] = i;
                ranks[i] = 1;
            }
        }

        public int find(int u)
        {
            if (u == parents[u]) return u;
            parents[u] = find(parents[u]);
            return parents[u];
        }

        public void unite(int u, int v)
        {
            u = find(u);
            v = find(v);
            if (u == v) return;
            if (ranks[u] > ranks[v]) {
                u ^= v; v ^= u; u ^= v;
            }
            parents[u] = v;
            ranks[v] += ranks[u];
        }
    }
}

namespace IOmacro
{
    //20.06.29 수정

    using System;
    using System.Linq;
    using System.IO;
    using System.Collections.Generic;

    public class CsharpInput
    {
        public static StreamWriter _writer = new StreamWriter(Console.OpenStandardOutput());
        public const char separator = ' ';
        public static string _string { get { return Console.ReadLine(); } }
        public static string[] _stringa { get { return (Console.ReadLine().Split(separator)); } }
        public static int _int { get { return int.Parse(Console.ReadLine()); } }
        public static int[] _inta { get { return Console.ReadLine().Split(separator).Select(int.Parse).ToArray(); } }
        public static long _long { get { return long.Parse(Console.ReadLine()); } }
        public static long[] _longa { get { return Console.ReadLine().Split(separator).Select(long.Parse).ToArray(); } }
        public static double _double { get { return double.Parse(Console.ReadLine()); } }
        public static double[] _doublea { get { return Console.ReadLine().Split(separator).Select(double.Parse).ToArray(); } }
    }

    public class CppInput
    {
        public static CppInput cin => new CppInput();
        public const char separator = ' ';
        private static readonly Queue<string> _input = new Queue<string>();
        private CppInput() { }
        public static implicit operator string(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return _input.Dequeue();
        }
        public static implicit operator int(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return int.Parse(_input.Dequeue());
        }
        public static implicit operator long(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return long.Parse(_input.Dequeue());
        }
        public static implicit operator double(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return double.Parse(_input.Dequeue());
        }
    }

    public static class CEnumerableExtension
    {
        public delegate void Function<in T>(T val);
        public static void foreachExtension<T>(this IEnumerable<T> enumerable, Function<T> function)
        {
            foreach (var x in enumerable) function(x);
        }
    }
}

