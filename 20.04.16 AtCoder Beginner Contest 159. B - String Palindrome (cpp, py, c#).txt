/******************************************c++
* 20.04.16 AtCoder Beginner Contest 159. B - String Palindrome 
* https://atcoder.jp/contests/abc159/tasks_print
* 
*********************************************/
/*********************************************

問題文長さが奇数である文字列Sが以下の条件をすべて満たすとき、
Sは「強い回文」であるといいます。Sは回文である。
NをSの長さとするとき、Sの1文字目から(N−1)/2文字目まで(両端含む)からなる文字列は
回文である。Sの(N+3)/2文字目からN文字目まで(両端含む)からなる文字列は回文である。
Sが強い回文かどうかを判定してください。

::test input::
akasaka

*********************************************/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define rep(i,n) for(int (i)=1;(i)<=(n);i++)
#define rez(i,n) for(int (i)=0;(i)<(n);i++)
#define ET "\n"

class CRun{
private:
    struct {
        string s = "";
    }gv;
public:
    CRun(){}; ~CRun(){};
    void build(); void solve();
    
    bool string_reverse_chk(string);
};

void CRun::build(){
    cin >> gv.s;
}

bool CRun::string_reverse_chk(string s) {
    string rev_s = s;
    reverse(rev_s.begin(), rev_s.end());
    if (s.compare(rev_s) == 0) return true;
    return false;
}

void CRun::solve(){
    string ans = "No";
    
    do {
        int slen = gv.s.length();
        string srev = gv.s;
        reverse(srev.begin(), srev.end());
        
        //condition 1.
        if (!string_reverse_chk(gv.s)) break;
        
        //condition 2.
        string cut_s1 = gv.s.substr(0, (slen -1)/2);
        string cut_s2 = srev.substr(0, (slen -1)/2);
        if (!string_reverse_chk(cut_s1)) break;
        if (!string_reverse_chk(cut_s2)) break;
        
        //condition 3.
        string cut_s3 = gv.s.substr((slen+3)/2 -1, slen);
        string cut_s4 = srev.substr((slen+3)/2 -1, slen);
        if (!string_reverse_chk(cut_s3)) break;
        if (!string_reverse_chk(cut_s4)) break;
        
        
        
        ans = "Yes";
    } while (0);
    
    cout << ans;
}


int main(){
    CRun run;
    run.build();
    run.solve();
}





##======================================python3
import sys
import collections
sys.setrecursionlimit(10**6)
input = sys.stdin.readline

class Run:
    def build(gv):
        gv.s = input().strip()
    
    def string_reverse_chk(gv, s:str):
        rev_s = "".join(list(reversed(s))[0:len(s)])
        if s == rev_s:
            return True
        return False
    
    def solve(gv):
        
        ans = "No"
        
        while True:
            slen = len(gv.s)
            reversed_s = "".join(list(reversed(gv.s))[0:slen])
            
            if gv.string_reverse_chk(gv.s) is False : break
            if gv.string_reverse_chk(gv.s[0:(slen -1)//2]) is False : break
            if gv.string_reverse_chk(reversed_s[0:(slen -1)//2]) is False : break
            
            if gv.string_reverse_chk(gv.s[(slen +3)//2 -1:slen]) is False : break
            if gv.string_reverse_chk(reversed_s[(slen +3)//2 -1:slen]) is False : break
            
            
            ans = "Yes"
            break
        
        print(ans)
        
if __name__ == '__main__':
    run = Run()
    run.build()
    run.solve()





using System; //Console, IComparable
using System.IO; //StreamWriter 
using System.Linq; //Select(), Where(), OrderBy(), Count()
using System.Collections.Generic; //List<T>
using System.Reflection; //PropertyInfo[], GetProperties[]
using static System.Console; 
using static NNN.CInput;

namespace NNN {
    public class CRun{
        private static class gv{
            public static string s = "";
        }
    
        public void build(){            
            gv.s = ReadLine();
        }
        
        private bool string_reverse_chk(string s) {
            var rev_s = new string(s.Reverse().ToArray());
            if (rev_s == s) return true;
            return false;
        }
    
        public void solve(){ StreamWriter so = new StreamWriter(Console.OpenStandardOutput());
            
            string ans = "No";
            
            do {
                int slen = gv.s.Length;
                var reversed_s = new string(gv.s.Reverse().ToArray());
                
                // con1
                if (gv.s != reversed_s) break;
                
                // con2
                var cut_1 = gv.s.Substring(0, (slen -1)/2);
                var cut_2 = reversed_s.Substring(0, (slen -1)/2);
                if (!this.string_reverse_chk(cut_1)) break;
                if (!this.string_reverse_chk(cut_2)) break;
                
                // con3
                var cut_3 = gv.s.Substring((slen +3)/2 -1 );
                var cut_4 = reversed_s.Substring((slen +3)/2 -1 );
                if (!this.string_reverse_chk(cut_3)) break;
                if (!this.string_reverse_chk(cut_4)) break;
                
                ans = "Yes";
            } while (false);
            
            WriteLine(ans);
        }
    }

    class Program { 
        static void Main() { 
            var run = new CRun();
            run.build();
            run.solve();
        } 
    }

    public static class CInput{
        public static string _string{get{return Console.ReadLine();}}
        public static string[] _stringa{get{return (Console.ReadLine().Split());}}
        public static int _int{get{return int.Parse(Console.ReadLine());}}
        public static int[] _inta{get{return Console.ReadLine().Split().Select(x=>int.Parse(x)).ToArray();}}
        public static long _long{get{return long.Parse(Console.ReadLine());}}
        public static long[] _longa{get{return Console.ReadLine().Split().Select(x=>long.Parse(x)).ToArray();}}    
    }
}
