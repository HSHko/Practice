/* C# template********************************
20.07.22 backjoon 11726. 2×n 타일링 (C#, dp)
2×n 크기의 직사각형을 1×2, 2×1 타일로 채우는 
방법의 수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 n이 주어진다. (1 ≤ n ≤ 1,000)

출력
첫째 줄에 2×n 크기의 직사각형을 채우는 방법의 수를 
10,007로 나눈 나머지를 출력한다.

예제 입력 1 
2
예제 출력 1 
2
*********************************************/


namespace temp_name
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Text;
    using static System.Console;
    using static IOmacro.CsharpInput;
    using static IOmacro.CppInput;

    public class Run
    {
        int[,] dp = new int[2*1000+1, 1<<2];
        int h_;
        int w_;
        int end_;
        
        public void init()
        {
            h_ = 2;
            w_ = cin;
            end_ = h_*w_;
            
            for (int i = 0; i < h_*w_; i++)
            for (int j = 0; j < 1<<h_; j++)
                dp[i,j] = -1;
        }
        
        private int calc(int pos, int bit)
        {
            if (pos > end_)
                return 0;
            if (pos == end_)
                return (bit == 0 ? 1 : 0);
            if (dp[pos, bit] != -1)
                return dp[pos, bit];
            
            if ((bit & 1) > 0) {
                dp[pos, bit] = calc(pos + 1, bit>>1);
            } else {
                dp[pos, bit] = calc(pos + 1, bit>>1 | 1<<(h_-1));
                
                if (pos%h_ != h_-1 && (bit & 2) == 0)
                    dp[pos, bit] += calc(pos + 2, bit>>2);
            }
            return dp[pos, bit]%10007;
        }
        
        public void proc()
        {
            int ans = calc(0, 0);
            WriteLine(ans);
        }
    }
}

class program
{

    static void Main(string[] args)
    {
        // var exStdIn = new System.IO.StreamReader(@"C:\Users\HAN\Desktop\VSC\input.txt"); System.Console.SetIn(exStdIn);
        var run = new temp_name.Run();
        run.init();
        run.proc();
    }
}


namespace IOmacro
{
    //20.06.29 수정

    using System;
    using System.Linq;
    using System.IO;
    using System.Collections.Generic;

    public class CsharpInput
    {
        public static StreamWriter _writer = new StreamWriter(Console.OpenStandardOutput());
        public const char separator = ' ';
        public static string _string { get { return Console.ReadLine(); } }
        public static string[] _stringa { get { return (Console.ReadLine().Split(separator)); } }
        public static int _int { get { return int.Parse(Console.ReadLine()); } }
        public static int[] _inta { get { return Console.ReadLine().Split(separator).Select(int.Parse).ToArray(); } }
        public static long _long { get { return long.Parse(Console.ReadLine()); } }
        public static long[] _longa { get { return Console.ReadLine().Split(separator).Select(long.Parse).ToArray(); } }
        public static double _double { get { return double.Parse(Console.ReadLine()); } }
        public static double[] _doublea { get { return Console.ReadLine().Split(separator).Select(double.Parse).ToArray(); } }
    }

    public class CppInput
    {
        public static CppInput cin => new CppInput();
        public const char separator = ' ';
        private static readonly Queue<string> _input = new Queue<string>();
        private CppInput() { }
        public static implicit operator string(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return _input.Dequeue();
        }
        public static implicit operator int(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return int.Parse(_input.Dequeue());
        }
        public static implicit operator long(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return long.Parse(_input.Dequeue());
        }
        public static implicit operator double(CppInput _)
        {
            if (_input.Count == 0) Console.ReadLine().Split(separator).foreachExtension(x => _input.Enqueue(x));
            return double.Parse(_input.Dequeue());
        }
    }

    public static class CEnumerableExtension
    {
        public delegate void Function<in T>(T val);
        public static void foreachExtension<T>(this IEnumerable<T> enumerable, Function<T> function)
        {
            foreach (var x in enumerable) function(x);
        }
    }
}

